# -*- coding: utf-8 -*-
"""lightbotkernel.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aMyJh07KxZRlD7n84D3JG98lCnIiXYZh
"""

# lightbotkernel.py

def lightbot_kernel():
    class Terrain:
        def __init__(self, width=10, height=10):
            self.width = width
            self.height = height
            self.grid = [[[0, False] for _ in range(width)] for _ in range(height)]

        def __str__(self):
            return f"Terrain({self.width}x{self.height})"

        def print_grid(self, bot):
            for y in range(self.height):
                row = ""
                for x in range(self.width):
                    if x == bot.x and y == bot.y:
                        row += "B "
                    elif self.grid[y][x][1]:
                        row += "L "
                    else:
                        row += ". "
                print(row)

    class Bot:
        def __init__(self, terrain, x_start=0, y_start=0, direction="N"):
            self.terrain = terrain
            self.x = x_start
            self.y = y_start
            self.direction = direction
            self.light_on = False

        def move(self):
            if self.direction == "N" and self.y > 0:
                self.y -= 1
            elif self.direction == "S" and self.y < self.terrain.height - 1:
                self.y += 1
            elif self.direction == "W" and self.x > 0:
                self.x -= 1
            elif self.direction == "E" and self.x < self.terrain.width - 1:
                self.x += 1

        def toggle_light(self):
            current_cell = self.terrain.grid[self.y][self.x]
            current_cell[1] = not current_cell[1]
            self.light_on = current_cell[1]

        def turn_left(self):
            directions = ["N", "W", "S", "E"]
            self.direction = directions[(directions.index(self.direction) - 1) % 4]

        def turn_right(self):
            directions = ["N", "E", "S", "W"]
            self.direction = directions[(directions.index(self.direction) + 1) % 4]

        def jump(self):
            self.move()
            current_cell = self.terrain.grid[self.y][self.x]
            current_cell[0] += 1

        def execute_instruction(self, instruction):
            if instruction == "^":
                self.move()
            elif instruction == "*":
                self.jump()
            elif instruction == ">":
                self.turn_right()
            elif instruction == "<":
                self.turn_left()
            elif instruction == "@":
                self.toggle_light()

            self.print_state()

        def print_state(self):
            light_status = "On" if self.light_on else "Off"
            print(f"Bot is at ({self.x}, {self.y}), facing {self.direction}, light is {light_status}.")
            print(f"Current cell height: {self.terrain.grid[self.y][self.x][0]}")
def last_digit_my_id():
    terrain = Terrain()  # Create the terrain object
    bot = Bot(terrain)   # Pass the terrain object to the bot
    instructions = ">@>^@^@^@^@^@^@<^@^@^@^@^@^@<*^^<^^^@<^@^^@^@^@**"  # Example instructions

    for instruction in instructions:
        bot.execute_instruction(instruction)  # Execute each instruction
        terrain.print_grid(bot)                # Print the grid after each instruction
        print()  # Print a blank line for better readability

if __name__ == "__main__":
    last_digit_my_id()
